#Running Single Nuclei from Singulator
#Sample: Liver RAT nuclei 3 different conditions (Control-CT, Cirrhotic-CH, Regression-R)
#Objective: Compare different conditions

###################################################	
### Packages and Seurat Object
###################################################	

library(hdf5r)

#In case Seurat didnt work. Open RStudio, go to "Packages", click on "install", watch for 'sn', then download it. Also downloaded 'httpuv' package
library(httpuv)
#install.packages("Matrix")
#remove.packages("Matrix")
if (!requireNamespace("BiocManager", quietly = TRUE)) 
 install.packages("BiocManager")
BiocManager::install("biovizBase")
library(BiocGenerics)
#install.packages("Seurat", dependencies = TRUE)
#install.packages("ape", dependencies=TRUE)
#install.packages("arrow", dependencies=TRUE, type="source")
#install.packages("reticulate", dependencies = TRUE)
#install.packages("Matrix", dependencies = TRUE)
library(Seurat)
library(patchwork)
library(htmltools)
library(tidyverse)
library(magrittr)
library(fs)
library(ggplot2)
library(dplyr)
library(Signac)
library(bitops)
library(EnsDb.Rnorvegicus.v79)
library(GenomicRanges)
library(data.table)
library(reshape2)
library(RColorBrewer)
library(BSgenome.Rnorvegicus.UCSC.rn6)
library(biovizBase)
library(xfun)
BiocManager::install("EnsDb.Rnorvegicus.v79", force = TRUE)
BiocManager::install("BSgenome.Rnorvegicus.UCSC.rn6", force = TRUE)

#Organize input data
args<- commandArgs(trailingOnly = TRUE)

# Check paths
# Automated paths:	
#HOME=path_home()	los datos estan esta vez en work, no en home

# Load RNA the dataset (from Seurat)
CT_1 <-Read10X_h5("/Users/marina/Documents/Projectes/Multiome_rat/GeneExpression/Rat_liver_multiome_CT_1/filtered_feature_bc_matrix.h5")
CH_1 <-Read10X_h5("/Users/marina/Documents/Projectes/Multiome_rat/GeneExpression/Rat_liver_multiome_CH_1/filtered_feature_bc_matrix.h5")
R_1 <-Read10X_h5("/Users/marina/Documents/Projectes/Multiome_rat/GeneExpression/Rat_liver_multiome_R_1/filtered_feature_bc_matrix.h5")

CT_2 <-Read10X_h5('/Users/marina/Documents/Projectes/Multiome_rat/GeneExpression/Rat_liver_multiome_CT_2/filtered_feature_bc_matrix.h5')
CH_2 <-Read10X_h5('/Users/marina/Documents/Projectes/Multiome_rat/GeneExpression/Rat_liver_multiome_CH_2/filtered_feature_bc_matrix.h5')
R_2 <-Read10X_h5('/Users/marina/Documents/Projectes/Multiome_rat/GeneExpression/Rat_liver_multiome_R_2/filtered_feature_bc_matrix.h5')

#Load ATAC data

fragpath_CT <- "/Users/marina/Documents/Projectes/Multiome_rat/ATAC/Rat_liver_multiome_CT_1/atac_fragments.tsv.gz"
fragpath_CH <- "/Users/marina/Documents/Projectes/Multiome_rat/ATAC/Rat_liver_multiome_CH_1/atac_fragments.tsv.gz"
fragpath_R <- "/Users/marina/Documents/Projectes/Multiome_rat/ATAC/Rat_liver_multiome_R_1/atac_fragments.tsv.gz"

fragpath_CT_2 <- "/Users/marina/Documents/Projectes/Multiome_rat/ATAC/Rat_liver_multiome_CT_2/atac_fragments.tsv.gz"
fragpath_CH_2 <- "/Users/marina/Documents/Projectes/Multiome_rat/ATAC/Rat_liver_multiome_CH_2/atac_fragments.tsv.gz"
fragpath_R_2 <- "/Users/marina/Documents/Projectes/Multiome_rat/ATAC/Rat_liver_multiome_R_2/atac_fragments.tsv.gz"

#get the annotations for Rn6

annotation_Rn6 <- GetGRangesFromEnsDb(ensdb = EnsDb.Rnorvegicus.v79)
seqlevelsStyle(annotation_Rn6) <- "UCSC"

#######This part is from scATAC https://satijalab.org/signac/articles/integrate_atac.html################

frag_counts_CT <- CountFragments (fragments = fragpath_CT)
frag_counts_CH <- CountFragments (fragments = fragpath_CH)
frag_counts_R <- CountFragments (fragments = fragpath_R)
frag_counts_CT_2 <- CountFragments(fragments = fragpath_CT_2)
frag_counts_CH_2 <-CountFragments(fragments = fragpath_CH_2)
frag_counts_R_2 <- CountFragments(fragments = fragpath_R_2)

#count fragments per cell 
atac.cells_CT_1 <- frag_counts_CT[frag_counts_CT$frequency_count >2000, "CB"]
atac.cells_CH_1 <-frag_counts_CH[frag_counts_CH$frequency_count >2000, "CB"]
atac.cells_R_1 <- frag_counts_R[frag_counts_R$frequency_count >2000, "CB"]

atac.cells_CT_2 <-frag_counts_CT_2[frag_counts_CT_2$frequency_count >2000, "CB"]
atac.cells_CH_2 <-frag_counts_CH_2[frag_counts_CH_2$frequency_count >2000, "CB"]
atac.cells_R_2 <-frag_counts_R_2[frag_counts_R_2$frequency_count >2000, "CB"]

#create the fragment object

atac_frags_CT_1 <- CreateFragmentObject(path = fragpath_CT, cells = atac.cells_CT_1)
atac_frags_CH_1 <- CreateFragmentObject(path = fragpath_CH, cells = atac.cells_CH_1)
atac_frags_R_1 <- CreateFragmentObject(path = fragpath_R, cells = atac.cells_R_1)
atac_frag_CT_2 <- CreateFragmentObject(path = fragpath_CT_2, cells = atac.cells_CT_2)
atac_frag_CH_2 <- CreateFragmentObject(path = fragpath_CH_2, cells = atac.cells_CH_2)
atac_frag_R_2 <- CreateFragmentObject(path = fragpath_R_2, cells = atac.cells_R_2)

##################################################
#Create Seurat Object for RNA data

Seurat_CT_1<- CreateSeuratObject(counts = CT_1$'Gene Expression', assay = "RNA", project = "Control")
#CT_1, project = "LiverCT" , min.cells = 3, min.features = 200)
Seurat_CT_1$sample <- "Liver_CT_1"
Seurat_CT_2<- CreateSeuratObject(counts = CT_2$'Gene Expression', assay = "RNA", project = "Control")
#CT_1, project = "LiverCT" , min.cells = 3, min.features = 200)
Seurat_CT_2$sample <- "Liver_CT_2"

Seurat_CH_1<- CreateSeuratObject(counts = CH_1$'Gene Expression', assay = "RNA", project = "Cirrhotic")
Seurat_CH_1$sample <- "Liver_CH_1"
Seurat_CH_2<- CreateSeuratObject(counts = CH_2$'Gene Expression', assay = "RNA", project = "Cirrhotic")
Seurat_CH_2$sample <- "Liver_CH_2"

Seurat_R_1<- CreateSeuratObject(counts = R_1$'Gene Expression', assay = "RNA", project = "Regression")
Seurat_R_1$sample <- "Liver_R_1"
Seurat_R_2<- CreateSeuratObject(counts = R_2$'Gene Expression', assay = "RNA", project = "Regression")
Seurat_R_2$sample <- "Liver_R_2"

#create ATAC assay and add it to the object

Seurat_CT_1[["ATAC"]] <- CreateChromatinAssay(counts = CT_1$Peaks, 
                                              sep = c(":", "-"),
                                              fragments = fragpath_CT,
                                              annotation = annotation_Rn6)

Seurat_CT_2[["ATAC"]] <- CreateChromatinAssay(counts = CT_2$Peaks, 
                                              sep = c(":", "-"),
                                              fragments = fragpath_CT_2,
                                              annotation = annotation_Rn6)

Seurat_CH_1[["ATAC"]] <- CreateChromatinAssay(counts = CH_1$Peaks, 
                                              sep = c(":", "-"),
                                              fragments = fragpath_CH,
                                              annotation = annotation_Rn6)

Seurat_CH_2[["ATAC"]] <- CreateChromatinAssay(counts = CH_2$Peaks, 
                                              sep = c(":", "-"),
                                              fragments = fragpath_CH_2,
                                              annotation = annotation_Rn6)

Seurat_R_1[["ATAC"]] <- CreateChromatinAssay(counts = R_1$Peaks, 
                                             sep = c(":", "-"),
                                             fragments = fragpath_R,
                                             annotation = annotation_Rn6)

Seurat_R_2[["ATAC"]] <- CreateChromatinAssay(counts = R_2$Peaks, 
                                             sep = c(":", "-"),
                                             fragments = fragpath_R_2,
                                             annotation = annotation_Rn6)

#PERCENT MITO
Seurat_CT_1$mitoRatio <- PercentageFeatureSet(object = Seurat_CT_1, pattern = "Mt-")
Seurat_CT_1$mitoRatio <- Seurat_CT_1@meta.data$mitoRatio/100
Seurat_CT_2$mitoRatio <- PercentageFeatureSet(object = Seurat_CT_2, pattern = "Mt-")
Seurat_CT_2$mitoRatio <- Seurat_CT_2@meta.data$mitoRatio/100

Seurat_CH_1$mitoRatio <- PercentageFeatureSet(object = Seurat_CH_1, pattern = "Mt-")
Seurat_CH_1$mitoRatio <- Seurat_CH_1@meta.data$mitoRatio/100
Seurat_CH_2$mitoRatio <- PercentageFeatureSet(object = Seurat_CH_2, pattern = "Mt-")
Seurat_CH_2$mitoRatio <- Seurat_CH_2@meta.data$mitoRatio/100

Seurat_R_1$mitoRatio <- PercentageFeatureSet(object = Seurat_R_1, pattern = "Mt-")
Seurat_R_1$mitoRatio <- Seurat_R_1@meta.data$mitoRatio/100
Seurat_R_2$mitoRatio <- PercentageFeatureSet(object = Seurat_R_2, pattern = "Mt-")
Seurat_R_2$mitoRatio <- Seurat_R_2@meta.data$mitoRatio/100


##SATIJA LAB MULTIOME https://satijalab.org/signac/articles/pbmc_multiomic.html

DefaultAssay(Seurat_CT_1) <-"ATAC"
DefaultAssay(Seurat_CH_1) <-"ATAC"
DefaultAssay(Seurat_R_1) <-"ATAC"
DefaultAssay(Seurat_CT_2) <- "ATAC"
DefaultAssay(Seurat_CH_2) <- "ATAC"
DefaultAssay(Seurat_R_2) <- "ATAC"

Seurat_CT_1 <-NucleosomeSignal(Seurat_CT_1)
Seurat_CT_1 <-TSSEnrichment(Seurat_CT_1) 
Seurat_CT_2 <-NucleosomeSignal(Seurat_CT_2)
Seurat_CT_2 <-TSSEnrichment (Seurat_CT_2)

Seurat_CH_1 <-NucleosomeSignal(Seurat_CH_1)
Seurat_CH_1 <-TSSEnrichment(Seurat_CH_1)
Seurat_CH_2 <- NucleosomeSignal (Seurat_CH_2)
Seurat_CH_2 <- TSSEnrichment (Seurat_CH_2)

Seurat_R_1 <- NucleosomeSignal(Seurat_R_1)
Seurat_R_1 <-TSSEnrichment(Seurat_R_1)
Seurat_R_2 <-NucleosomeSignal (Seurat_R_2)
Seurat_R_2 <- TSSEnrichment (Seurat_R_2)

saveRDS(Seurat_CT_1, file ="Seurat_CT_1.rds")
saveRDS(Seurat_CT_2, file ="Seurat_CT_2.rds")
saveRDS(Seurat_CH_1, file ="Seurat_CH_1.rds")
saveRDS(Seurat_CH_2, file ="Seurat_CH_2.rds")
saveRDS(Seurat_R_1, file ="Seurat_R_1.rds")
saveRDS(Seurat_R_2, file ="Seurat_R_2.rds")

#Merge replicates
combined.CT <- merge(Seurat_CT_1, y = Seurat_CT_2, add.cell.ids = c("Liver_CT_1", "Liver_CT_2"), project = "Control")
combined.CH <- merge(Seurat_CH_1, y = Seurat_CH_2, add.cell.ids = c("Liver_CH_1", "Liver_CH_2"), project = "Cirrhotic")
combined.R <- merge(Seurat_R_1, y = Seurat_R_2, add.cell.ids = c("Liver_R_1", "Liver_R_2"), project = "Regression")

#CONFIRMAR MOSTRES I NUM DE CELS
ct <-combined.CT@meta.data %>% as.data.table
ct[, .N, by = c("sample", "orig.ident")] #D'aquesta manera son 4000 i 4000 OK!

ch <-combined.CH@meta.data %>% as.data.table
ch[, .N, by = c("sample", "orig.ident")]

r <-combined.R@meta.data %>% as.data.table
r[, .N, by = c("sample", "orig.ident")]

all.merged <-merge(combined.CT, y=c(combined.CH,combined.R))

##FILTER OUT LOW QUALITY NUCLEI (nCount_RNA<25000, nCount_ATAC > 1000 & <100000, nCount_RNA>1000, nucleosome_signal <2, TSS.enrichment >1, mitoRatio <0.2)

all.merged <-subset(
  x = all.merged, 
  subset = nCount_ATAC < 100000 &
    nCount_ATAC > 1000 & 
    nCount_RNA < 25000 & 
    nCount_RNA > 500 &
    nucleosome_signal < 2 &
    TSS.enrichment >1 &
    mitoRatio<0.2)

###############################
####Merge filtered datasets####
###############################

merged <- all.merged@meta.data %>% as.data.table
merged[, .N, by = c("sample", "orig.ident")]


#QC

VlnPlot(all.merged, features = c("mitoRatio", "nCount_RNA", "nFeature_RNA", "nCount_ATAC", "TSS.enrichment", "nucleosome_signal"), group.by = "sample", pt.size = 0)
VlnPlot(all.merged, features = c("mitoRatio", "nCount_RNA", "nFeature_RNA", "nCount_ATAC", "TSS.enrichment", "nucleosome_signal"), group.by = "orig.ident", pt.size = 0)

saveRDS(all.merged, file = "all.merged.rds")

#NORMALITZAR GENE EXPRESSION
DefaultAssay(all.merged) <- "RNA"

#split dataset into a list of seurat objects
Filt_list <- SplitObject(all.merged, split.by = "orig.ident")

#normalize and identify variable features for each dataseet independently
Filt_list <- lapply(X = Filt_list, FUN = function(x) {
  x <- NormalizeData(x)
  x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})

#select features that are repeteadly variable across datasets for integration
features <- SelectIntegrationFeatures (object.list = Filt_list)

#Perform Integration

liver.anchors <-FindIntegrationAnchors (object.list = Filt_list, anchor.features = features)
all.liver.combined <- IntegrateData (anchorset = liver.anchors)

#Perform integrated analysis
DefaultAssay(all.liver.combined) <-"integrated"

#Run the standard workflow for visualization and clustering

all.liver.combined <- ScaleData(all.liver.combined, verbose = F)
all.liver.combined <- RunPCA(all.liver.combined, npcs = 30, verbose = F)

#Cluster cells

all.liver.combined <- FindNeighbors(all.liver.combined, dims = 1:10)
all.liver.combined <- FindClusters(all.liver.combined, resolution = 0.2)
all.liver.combined <- RunUMAP(all.liver.combined, reduction = "pca", dims = 1:30)
all.liver.combined <- RunTSNE(all.liver.combined, reduction = "pca", dims = 1:30)

#Reordenar
all.liver.combined$orig.ident <-factor(x = all.liver.combined$orig.ident, levels = c("Control", "Cirrhotic", "Regression")) #Reordenar
all.liver.combined$sample <-factor(x = all.liver.combined$sample, levels = c("Liver_CT_1", "Liver_CT_2", "Liver_CH_1", "Liver_CH_2", "Liver_R_1", "Liver_R_2"))

saveRDS(all.liver.combined, file = "all.liver.combined.rds")

#VISUALIZE

DimPlot(all.liver.combined, reduction = "umap", group.by = "seurat_clusters", split.by = "orig.ident", label = T)
DimPlot(all.liver.combined, reduction = "umap", group.by = "seurat_clusters")
DimPlot(all.liver.combined, reduction = "umap", group.by = "ident") #utilitza el nom donat
DimPlot(all.liver.combined, reduction = "tsne", group.by = "orig.ident")
DimPlot(all.liver.combined, reduction = "tsne", group.by = "seurat_clusters")

DimPlot(all.liver.combined, reduction = "pca", group.by = "sample")

#FIND MARKERS

liver.combined.markers <- FindAllMarkers(all.liver.combined, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
liver.combined.markers.list <- liver.combined.markers%>%group_by(cluster) %>% top_n(n=10, wt = avg_log2FC)
liver.combined.markers.top10 <- liver.combined.markers %>% group_by(cluster) %>% top_n(n=10, wt = avg_log2FC) #%>% select(cluster, marker_gene=gene)
liver.combined.markers.top20 <- liver.combined.markers %>% group_by(cluster) %>% top_n(n=20, wt = avg_log2FC) #%>% select(cluster, marker_gene=gene)

all.markers <-FindMarkers(all.liver.combined, ident.1 = LSEC, test.use = "MAST", group.by = "orig.ident")

#Distribution among clusters from https://www.singlecellcourse.org/scrna-seq-dataset-integration.html

count_table <- table(all.liver.combined@meta.data$seurat_clusters, all.liver.combined@meta.data$orig.ident)

#Distribucio d'un gen en el UMAP
FeaturePlot(object = all.liver.combined, features = c("Csad"))

VlnPlot(object = all.liver.combined, features = c("Cxcr4"), pt.size = 0)
#RidgePlot(all.liver.combined, features = interzonal_markers, ncol = 2) + RotatedAxis()

table(all.liver.combined@meta.data$seurat_clusters)

#Percentage

pt <-table(Idents(all.liver.combined), all.liver.combined$orig.ident)
pt <-as.data.frame(pt)
pt$Var1 <-as.character(pt$Var1)

ggplot(pt, aes(x =Var2, y= Freq, fill = Var1 )) +
  theme_bw(base_size = 15) +
  geom_col(position = "fill", width = 0.5) +
  xlab("Sample") +
  ylab("Proportion") +
  scale_fill_manual(values = brewer.pal(12, "Paired")) +
  theme(legend.title = element_blank()) + 
  theme(axis.text.x = element_text(angle = 90)) +
  ggtitle("Proportion Cells")

#HEPATOCYTES

hepatocytes <- subset(x = all.liver.combined, idents = c("Pericentral Hepatocytes", "Periportal Hepatocytes", "Midportal Hepatocytes", "Proliferating Hepatocytes"))
hepatocytes <- FindNeighbors(hepatocytes, dims = 1:10)
hepatocytes <- FindClusters(hepatocytes, resolution = 0.2)
hepatocytes <- RunUMAP(hepatocytes, dims = 1:10)
hepatocytes <- RunTSNE(hepatocytes, reduction = "pca", dims = 1:30)

#saveRDS(hepatocytes, file = "hepatocytes.rds")

DimPlot(hepatocytes, reduction = "umap", group.by = "seurat_clusters" )
DimPlot(hepatocytes, reduction = "umap", group.by = "seurat_clusters", split.by = "orig.ident")
DimPlot(hepatocytes, reduction = "umap", group.by = "seurat_clusters", split.by = "sample")
DimPlot(hepatocytes, reduction = "umap", group.by = "seurat_clusters", split.by = "ident")

Hepatocytes_markers <- FindAllMarkers(hepatocytes, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
Hepatocytes_markers_list <- Hepatocytes_markers%>%group_by(cluster) %>% top_n(n=10, wt = avg_log2FC)

FeaturePlot(object = hepatocytes, features = "mitoRatio")

FeaturePlot(object = hepatocytes, features = c("Glul")) 

cancer_markers <- c("Epcam", "Cd44", "Prom1")

VlnPlot(all.liver.combined, features = c("Scd", "Hmgcs1", "Acss1", "Msmo1", "Lepr"), pt.size = 0) #Periportal markers MacParland1

VlnPlot(hepatocytes, features = c("Cps1")) 

DoHeatmap(all.liver.combined, features = liver.combined.markers.list$gene, group.by = "seurat_clusters") + theme (text = element_text(size = 7))

all_hepatocytes_markers <- c("Hal", "Hmgcs1", "Acss2", "C3", "Scd", "Apoa2", "Apoc3", "Fga", "Fgg", "Orm1","Acly","Fabp1", "Sod1", "Hamp","Igfbp2","Sds",  "Abcc2", "Bhmt", "Akr1c1", "Cyp1a2","Glul", "Cyp27a1","Cyp2e1", "Slc1a2")
periportal_markers <- c("Hal", "Hmgcs1", "Acss2", "C3", "Scd", "Apoa2", "Apoc3", "Fga", "Fgg", "Orm1", "Acly")
interzonal_markers <- c("Fabp1", "Sod1", "Hamp", "Igfbp2", "Sds")
pericentral_markers <- c("Abcc2", "Bhmt", "Akr1c1", "Cyp1a2", "Glul", "Cyp27a1", "Cyp2e1", "Slc1a2")

DoHeatmap(hepatocytes, features = pericentral_markers, group.by = "seurat_clusters") + theme (text = element_text(size = 7))

DotPlot(hepatocytes, features = all_hepatocytes_markers, dot.scale = 6) + RotatedAxis() + coord_flip() + theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10))
DotPlot(hsc, features = all_hsc_markers, split.by = "orig.ident", dot.scale = 4, cols = c("Red", "Green", "Blue")) + theme(axis.text.x = element_text(angle = 90))

count_hepatocytes <- table(hepatocytes@meta.data$seurat_clusters, hepatocytes@meta.data$orig.ident)
prop.table(table(Idents(hepatocytes), hepatocytes$sample), margin = 2) 

#Percentage

pt_hep <-table(Idents(hepatocytes), hepatocytes$orig.ident)
pt_hep <-as.data.frame(pt_hep)
pt_hep$Var1 <-as.character(pt_hep$Var1)

ggplot(pt_hep, aes(x =Var2, y= Freq, fill = Var1 )) +
  theme_bw(base_size = 15) +
  geom_col(position = "fill", width = 0.5) +
  xlab("Sample") +
  ylab("Proportion") +
  scale_fill_manual(values = brewer.pal(12, "Paired")) +
  theme(legend.title = element_blank()) + 
  theme(axis.text.x = element_text(angle = 90))

#cell cycle
hepatocytes <- CellCycleScoring(hepatocytes, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)
DimPlot(hepatocytes, reduction = "umap")

#HSC

hsc <- subset(x= all.liver.combined, idents = c("HSCs"))
hsc <- FindNeighbors(hsc, dims = 1:20)
hsc <- FindClusters(hsc, resolution = 0.1)
hsc <- RunUMAP(hsc, dims = 1:10)
hsc<- RunTSNE(hsc, reduction = "pca", dims = 1:30)

#saveRDS(hsc, file = "hsc.rds")

DimPlot(hsc, reduction = "umap", group.by = "seurat_clusters")
DimPlot(hsc, reduction = "tsne", group.by = "seurat_clusters", split.by = "sample")

#SHA DE FER UN SUBCLUSTERING AMB NOMES EL CLUSTER 0 i 1, EL 2 te MITORATIO molt alt

HSC_markers <- FindAllMarkers(hsc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
HSC_markers_list <- HSC_markers%>%group_by(cluster) %>% top_n(n=10, wt = avg_log2FC)

count_hsc <- table(hsc@meta.data$seurat_clusters, hsc@meta.data$sample)

all_hsc_markers <- c("Pth1r", "Reln", "Colec11", "Hgf", "Nrxn3", "Nrxn1", "Pcdh7", "Col3a1", "Pdgfrb", "Acta2", "Tagln", "Col1a1", "Col1a2", "Sparc", "Adamts2", "Lama2", "Lamb1", "Dcn", "Aox1")
graph_markers <-c("Aox1", "Dcn", "Adamts2", "Col1a1", "Tagln", "Acta2", "Pdgfrb", "Nrxn1", "Nrxn3", "Hgf", "Colec11", "Reln", "Pth1r")
quiescent_markers <- c("Pth1r", "Reln", "Colec11", "Hgf", "Nrxn3", "Nrxn1", "Pcdh7")
activation_markers <- c("Col3a1", "Pdgfrb", "Acta2", "Tagln", "Col1a1", "Col1a2", "Sparc", "Adamts2", "Lama2", "Lamb1", "Dcn")

DotPlot(hsc, features = graph_markers, dot.scale = 6) + RotatedAxis() + coord_flip() + theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10))
DotPlot(hsc, features = c("Aox1"))

FeaturePlot(object = hsc, features = c("Ccl2") , split.by = "seurat_clusters")
FeaturePlot(object = hsc, features = c("Myl9"), split.by = "orig.ident")

VlnPlot(hsc, features = c( "Acta2"), split.by = "orig.ident", pt.size = 0)

#cell cycle
#FALTEN s.genes y g2m.genes
hsc <- CellCycleScoring(hsc, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)
DimPlot(hsc, reduction = "umap", split.by = "orig.ident")
cycle_hsc <- table(hsc@meta.data$Phase, hsc@meta.data$orig.ident)

#Possible genes for HSC: Tpm2, Bgn, Igfbp3

#Percentage

pt_hsc <-table(Idents(hsc), hsc$sample)
pt_hsc <-as.data.frame(pt_hsc)
pt_hsc$Var1 <-as.character(pt_hsc$Var1)

ggplot(pt_hsc, aes(x =Var2, y= Freq, fill = Var1 )) +
  theme_bw(base_size = 15) +
  geom_col(position = "fill", width = 0.5) +
  xlab("Sample") +
  ylab("Proportion") +
  scale_fill_manual(values = brewer.pal(12, "Paired")) +
  theme(legend.title = element_blank()) + 
  theme(axis.text.x = element_text(angle = 90)) +
  ggtitle("Proportion HSC")

#KC

kc<- subset(all.liver.combined, idents = c("Kupffer Cells M1", "Kupffer Cells M2"))
kc <- FindNeighbors(kc, dims = 1:10)
kc <- FindClusters(kc, resolution = 0.2)
kc <- RunUMAP(kc, dims = 1:10)
kc<- RunTSNE(kc, reduction = "pca", dims = 1:30)

saveRDS(kc, file = "kc.rds")

KC_markers <- FindAllMarkers(kc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
KC_markers_list <- KC_markers%>%group_by(cluster) %>% top_n(n=10, wt = avg_log2FC)

count_kc <- table(kc@meta.data$seurat_clusters, kc@meta.data$orig.ident)

DimPlot(kc, reduction = "umap", group.by = "seurat_clusters")
DimPlot(kc, reduction = "tsne", group.by = "seurat_clusters", split.by = "orig.ident")

FeaturePlot(object = kc, features = c(""), split.by = "orig.ident")

healthy_kc_markers <- c("Pparg", "Cd5l", "Clec4f")
M1_markers <- c("Il1b", "Cd68", "Mmp9", "Cd74", "S100a8", "S100a9", "Vcan", "S100a6", "Mnda", "Il18", "Lyz2") #Inflammatory
M2_markers <- c("Cd163", "Marco", "Mrc1", "Cd68", "Cd5l", "Vsig4", "Ccdc88a", "Ctsb", "Vcam1", "Hmox1") #Immunoregulatory/Tolerogenic
all_kc_markers <- c("Il1b", "Cd68", "Mmp9", "Cd74", "S100a8", "S100a9", "Vcan", "S100a6", "Mnda", "Il18","Lyz2", "Cd163", "Marco", "Mrc1", "Cd5l", "Vsig4", "Ccdc88a", "Ctsb", "Vcam1", "Hmox1")

VlnPlot(obj = kc, features = all_kc_markers, pt.size = 0)
VlnPlot(obj = kc, features = c("Marco"), pt.size = 0, split.by = "orig.ident")

FeaturePlot(object = kc, features = c("Kynu"), split.by = "seurat_clusters")

DotPlot(kc, features = c("Cd163", "Marco", "Cd68"), dot.scale = 6, split.by = "orig.ident", cols = c("Green", "Red", "Blue")) +
  RotatedAxis() + coord_flip() + theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10))

#cell cycle
kc <- CellCycleScoring(kc, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)
DimPlot(kc, reduction = "umap", group.by =  "Phase", split.by = "seurat_clusters")
cycle_kc <- table(kc@meta.data$Phase, kc@meta.data$orig.ident)

#Percentage

pt_kc <-table(Idents(kc), kc$sample)
pt_kc <-as.data.frame(pt_kc)
pt_kc$Var1 <-as.character(pt_kc$Var1)

ggplot(pt_kc, aes(x =Var2, y= Freq, fill = Var1 )) +
  theme_bw(base_size = 15) +
  geom_col(position = "fill", width = 0.5) +
  xlab("Sample") +
  ylab("Proportion") +
  scale_fill_manual(values = brewer.pal(12, "Paired")) +
  theme(legend.title = element_blank()) + 
  theme(axis.text.x = element_text(angle = 90)) +
  ggtitle("Proportion KC")

#LSEC

lsec<- subset(all.liver.combined, idents = c("LSEC"))
lsec <- FindNeighbors(lsec, dims = 1:10)
lsec <- FindClusters(lsec, resolution = 0.2)
lsec <- RunUMAP(lsec, dims = 1:10)
lsec<- RunTSNE(lsec, reduction = "pca", dims = 1:30)

#saveRDS(lsec, file = "lsec.rds")

LSEC_markers <- FindAllMarkers(lsec, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
LSEC_markers_list <- LSEC_markers%>%group_by(cluster) %>% top_n(n=10, wt = avg_log2FC)

count_lsec <- table(lsec@meta.data$seurat_clusters, lsec@meta.data$sample)

DimPlot(lsec, reduction = "umap", group.by = "seurat_clusters", split.by = "orig.ident")
DimPlot(lsec, reduction = "tsne", group.by = "seurat_clusters", split.by = "orig.ident")

FeaturePlot(object = lsec, features = c("Calcrl"), split.by = "orig.ident")

count_lsec <- table(lsec@meta.data$seurat_clusters, lsec@meta.data$orig.ident)

#Calcrl endothelial marker

#Cluster 1
LSEC_periportal <- c("Pecam1", "Mgp", "Sparcl1", "Clec14a", "Igfbp7", "Vwf", "Cd9", "Id3", "Aqp1", "Ptprc") #low expression of Stab2

#Cluster 0
LSEC_centralvenous <- c("Stab2", "Stab1", "Ifi27", "Oit3", "Ramp3", "Sgk1", "Dnase1l3", "Lifr", "Sparc", "Adgrl4", "Fcgr2b")

#Cluster 2
Portal_EC <- c("Vwf", "Eng", "Pecam1", "Ptgds", "Timp3", "Gpm6a", "Ptprb","Ifi27") #no Stab2

Lsec_all_markers <- c("Pecam1", "Mgp", "Sparcl1", "Clec14a", "Igfbp7", "Vwf", "Cd9", "Id3", "Aqp1","Fcgr2b" ,"Stab2", "Stab1", "Ifi27", "Ramp3", "Sgk1", "Dnase1l3", "Lifr", "Sparc", "Adgrl4", "Eng","Ptgds", "Timp3", "Gpm6a", "Ptprb")

DotPlot(lsec, features = Lsec_all_markers, dot.scale = 6) + RotatedAxis() + coord_flip() + theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10))

VlnPlot(obj = lsec, features = c( "Tlr4"), pt.size = 0)

#Ptprc=Cd45, Cd105=Eng, Cd32b=Fcgr2b, Cd31=Pecam1

#cell cycle
lsec <- CellCycleScoring(lsec, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)
DimPlot(lsec, reduction = "umap", group.by =  "Phase", split.by = "orig.ident")
cycle_lsec <- table(lsec@meta.data$Phase, lsec@meta.data$orig.ident)

#Percentage

pt_lsec <-table(Idents(lsec), lsec$sample)
pt_lsec <-as.data.frame(pt_lsec)
pt_lsec$Var1 <-as.character(pt_lsec$Var1)

ggplot(pt_lsec, aes(x =Var2, y= Freq, fill = Var1 )) +
  theme_bw(base_size = 15) +
  geom_col(position = "fill", width = 0.5) +
  xlab("Sample") +
  ylab("Proportion") +
  scale_fill_manual(values = brewer.pal(12, "Paired")) +
  theme(legend.title = element_blank()) + 
  theme(axis.text.x = element_text(angle = 90))

#Cholangiocytes

cholangio<- subset(all.liver.combined, idents = c("8"))
cholangio <- FindNeighbors(cholangio, dims = 1:10)
cholangio<- FindClusters(cholangio, resolution = 0.5)
cholangio <- RunUMAP(cholangio, dims = 1:10)
cholangio<- RunTSNE(cholangio, reduction = "pca", dims = 1:30)

saveRDS(cholangio, file = "cholangio.rds")

cholangio_markers <- FindAllMarkers(cholangio, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
cholangio_markers_list <- cholangio_markers%>%group_by(cluster) %>% top_n(n=10, wt = avg_log2FC)

count_cholangio <- table(cholangio@meta.data$seurat_clusters, cholangio@meta.data$orig.ident)

DimPlot(cholangio, reduction = "umap", group.by = "seurat_clusters")
DimPlot(cholangio, reduction = "tsne", group.by = "seurat_clusters")

FeaturePlot(object = cholangio, features = c("Krt19"), split.by = "orig.ident")

chol_mark <- c( "Cd24", "Aqp1", "Pigr", "Spp1", "Krt18", "Krt8") #mature cholangiocyte "Sox9", "Epcam",??
hepatocyte_chol_markers <- c("Hp", "Ambp", "Hal")
progenitor_associated <-c("Tdo2","Hnf1b","Onecut1","Cdh1", "Prom1", "Sox9", "Sox6", "Anpep", "Maml3")

all_cholang_markers <-c( "Cd24", "Pigr", "Spp1", "Krt8", "Epcam","Sox9","Hp", "Ambp", "Hal","Cdh1", "Tdo2","Hnf1b","Onecut1", "Maml3") 

DotPlot(cholangio, features = all_cholang_markers, dot.scale = 6) + RotatedAxis() + coord_flip() + theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10))

VlnPlot(obj = cholangio, features = c("Krt18", "Krt8","Cd24", "Pigr","Spp1","Hnf1b", "Sox9"), pt.size = 0)

#cell cycle
cholangio <- CellCycleScoring(cholangio, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)
DimPlot(cholangio, reduction = "umap", group.by =  "Phase", split.by = "seurat_clusters")
cycle_cholangio <- table(cholangio@meta.data$Phase, cholangio@meta.data$orig.ident)

#Percentage

pt_chol <-table(Idents(cholangio), cholangio$sample)
pt_chol <-as.data.frame(pt_chol)
pt_chol$Var1 <-as.character(pt_chol$Var1)

ggplot(pt_chol, aes(x =Var2, y= Freq, fill = Var1 )) +
  theme_bw(base_size = 15) +
  geom_col(position = "fill", width = 0.5) +
  xlab("Sample") +
  ylab("Proportion") +
  scale_fill_manual(values = brewer.pal(12, "Paired")) +
  theme(legend.title = element_blank()) + 
  theme(axis.text.x = element_text(angle = 90))

#Tcells/NK-cells

tcell<- subset(all.liver.combined, idents = c("7"))
tcell <- FindNeighbors(tcell, dims = 1:10)
tcell<- FindClusters(tcell, resolution = 0.3)
tcell <- RunUMAP(tcell, dims = 1:10)
tcell<- RunTSNE(tcell, reduction = "pca", dims = 1:30)

saveRDS(tcell, file = "tcell.rds")

tcell_markers <- FindAllMarkers(tcell, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
tcell_markers_list <- tcell_markers%>%group_by(cluster) %>% top_n(n=10, wt = avg_log2FC)

count_tcell<- table(tcell@meta.data$seurat_clusters, tcell@meta.data$sample)
tcell_num <- tcell@meta.data %>% as.data.table
tcell_num[,.N, by= c("sample", "seurat_clusters")] %>% dcast(., sample ~ seurat_clusters, value.var = "N")


DimPlot(tcell, reduction = "umap", group.by = "seurat_clusters", split.by = "orig.ident")
DimPlot(tcell, reduction = "tsne", group.by = "seurat_clusters")

FeaturePlot(object = tcell, features = c("S100a4"), split.by = "seurat_clusters")

#Cluster 1
tcell_mark_ab <- c("Il7r", "Cd3e") 
#Cluster 0
tcell_mark_dg <- c( "Prf1", "Tbx21", "Fcgr3a", "Ctsw", "Ifitm1", "Clic5")
Phosphoantigen_reactive_tcells <- c("Mki67", "Tuba1b", "Cenpf")

tcell_comon <-c("Cd3d", "Ccl5", "Gzma", "Gzmk" ,"Cd247", "Cd7", "Nkg7", "Ltb", "Klrd1")

#Cluster 3
nkcell_mark <-c( "Xcl1", "Ccl3", "Ccl4", "Alox5ap") #Gzmk i Ltb tambe de ab, CD7 i Nkg7 de dg  #without Fcg3a
all_tcell_markes <-c("Ptprc", "Il7r", "Cd3e", "Prf1", "Tbx21", "Fcgr3a", "Ctsw", "Ifitm1", "Clic5","Xcl1", "Ccl3", "Ccl4", "Alox5ap","Cd3d", "Ccl5", "Gzma", "Gzmk" ,"Cd247", "Cd7", "Nkg7", "Ltb", "Klrd1")

DotPlot(tcell, features = all_tcell_markes, dot.scale = 8) + RotatedAxis  () + coord_flip() + theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10))
DotPlot(tcell, features = Phosphoantigen_reactive_tcells, dot.scale = 8) + RotatedAxis  () + coord_flip() + theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10))
VlnPlot(obj = tcell, features = c( "S100a4", "Il7r"), pt.size = 0)

count_tcell <- table(tcell@meta.data$seurat_clusters, tcell@meta.data$sample)

#B-cells + Tcells/NK-cells

tcell_bcell<- subset(liver.combined, idents = c("8", "9"))
tcell_bcell <- FindNeighbors(tcell_bcell, dims = 1:10)
tcell_bcell<- FindClusters(tcell_bcell, resolution = 0.6)
tcell_bcell <- RunUMAP(tcell_bcell, dims = 1:30)
tcell_bcell<- RunTSNE(tcell_bcell, reduction = "pca", dims = 1:10)

saveRDS(tcell_bcell, file = "tcell_bcell.rds")

tcell_bcell_markers <- FindAllMarkers(tcell_bcell, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
tcell_bcell_markers_list <- tcell_bcell_markers%>%group_by(cluster) %>% top_n(n=10, wt = avg_log2FC)

count_tcell_bcell<- table(tcell_bcell@meta.data$seurat_clusters, tcell_bcell@meta.data$sample)
tcell_bcell_num <- tcell_bcell@meta.data %>% as.data.table
tcell_bcell_num[,.N, by= c("sample", "seurat_clusters")] %>% dcast(., sample ~ seurat_clusters, value.var = "N")

DimPlot(tcell_bcell, reduction = "umap", group.by = "orig.ident")
DimPlot(tcell_bcell, reduction = "tsne", group.by = "seurat_clusters", split.by = "sample")

FeaturePlot(object = tcell_bcell, features = c("Ssr4"))

VlnPlot(obj = tcell, features = c("Cd3e", "Fcgr3a","Ccl4", "Cd3d", "Il7r"), pt.size = 0) #ab
VlnPlot(obj = tcell, features = c("Nkg7", "Tbx21","Clic5", "Cd3d", "Fcgr3a", "Cd7"), pt.size = 0) # dg
VlnPlot(obj = tcell, features = c("Top2a", "Mki67","Tuba1b", "Nusap1"), pt.size = 0) #reactive T
VlnPlot(obj = tcell_bcell, features = c("Cenpf", "Ccnb1"), pt.size = 0) #
VlnPlot(obj = tcell, features = c("Xcl1", "Ccl3", "Ccl4", "Alox5ap"), pt.size = 0) #Nk
VlnPlot(obj = tcell_bcell, features = c("Cd79b", "Bank1", "Cd74", "Irf8", "Birc3", "Sell"), pt.size = 0) #Bcells
VlnPlot(obj = tcell, features = c("Fcgr3a", "Prf1", "Klrd1", "Fcer1g"), pt.size = 0) #similar NK i dg
VlnPlot(obj = tcell, features = c("Kynu"), pt.size = 0) #check

#Check Cenpp, Diaph3

all_tcell_markes <-c("Ptprc", "Il7r", "Cd3e", "Prf1", "Tbx21", "Fcgr3a", "Clic5","Xcl1", "Ccl3", "Ccl4","Cd3d", "Ccl5", "Gzma", "Gzmk" ,"Cd247", "Cd7", "Nkg7", "Ltb", "Klrd1","Cd79b", "Bank1", "Cd74", "Top2a", "Mki67","Tuba1b", "Nusap1", "Cenpp", "Diaph3")


DotPlot(tcell, features = all_tcell_markes, dot.scale = 6) + RotatedAxis  () + coord_flip() + theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10))

#cell cycle
tcell_bcell <- CellCycleScoring(tcell_bcell, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)
DimPlot(tcell_bcell, reduction = "umap", group.by =  "Phase", split.by = "orig.ident")
cycle_tcell_bcell <- table(tcell_bcell@meta.data$Phase,tcell_bcell@meta.data$seurat_clusters, tcell_bcell@meta.data$orig.ident)

##Manual annotation

old_clusters_id <- c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12")
new_clusters_id <- c("Pericentral Hepatocytes", "Pericentral Hepatocytes", "LSEC", "Kupffer cells M2", "HSCs", "Periportal Hepatocytes", "Kupffer cells M1", "T/NK-cells", "Cholangiocytes", "Hepatocytes" ,"UK")
names(new_clusters_id) <- levels(all.liver.combined)
all.liver.combined <- RenameIdents(all.liver.combined, new_clusters_id)

all.liver.combined <- SetIdent(all.liver.combined, value = all.liver.combined@meta.data$seurat_clusters)



#all.liver.combined[["new.ident"]] <- Idents(object = all.liver.combined)

DimPlot(liver.combined, reduction = "pca", label.size = 3, group.by = "orig.ident")

DimPlot(liver.combined, reduction = "umap", group.by = "orig.ident")

table(Idents(liver.combined)) #taula amb tots els nums de cells
liver.cells <-liver.combined@meta.data %>% as.data.table

liver.cells[, .N, by = c("sample", "new.ident")] %>% dcast(., sample ~ new.ident, value.var = "N")

#proportion of cell population in different conditions

prop_cells <-prop.table(table(Idents(liver.combined), liver.combined$orig.ident), margin = 2) 

print.data.frame(liver_nums)

###DOUBLETS by Doublet Finder###
BiocManager::install('remotes')
remotes::install_github('chris-mcginnis-ucsf/DoubletFinder')
library(DoubletFinder)
#pk identification 

pk_list_liver <- paramSweep_v3(liver.combined, PCs = 1:10, sct = T) #en teoria diu sct = F, pero aixi no funciona. Potser pk son dades integrades?

pk_stats_liver_1 <- summarizeSweep(pk_list_liver, GT = FALSE)

bcmvn_liver_1 <- find.pK(pk_stats_liver_1)

#Homotypic Doublet proportion estimate

annotations <- liver.combined@meta.data$seurat_clusters

homotypic.prop <-modelHomotypic(annotations)
nExp_poi <- round(0.035*nrow(liver.combined@meta.data)) ##assuming 3.5% doublet formation rate
nExp_poi_adj <- round(nExp_poi*(1-homotypic.prop))

##Run DoubletFinder with barying classification stringencies

liver.combined <-doubletFinder_v3(liver.combined, PCs = 1:10, pN = 0.25, pK = 0.09, nExp = nExp_poi, reuse.pANN = FALSE, sct = TRUE)

FeaturePlot(liver.combined, features = "pANN_0.25_0.09_355")
FeaturePlot(liver.combined, features = "DF.classifications_0.25_0.09_355")
VlnPlot(liver.combined,
        features = "nCount_RNA",
        group.by = "DF.classifications_0.25_0.09_355", split.by = "orig.ident")

saveRDS(liver.combined, file = "liver.combined.rds")


##CELL CYCLE

#S'han de canviar els noms de gens de majuscules a minuscules, excepte la primera lletra

s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes

#A miniscula
g2m.genes <-tolower(g2m.genes)
s.genes <-tolower(s.genes)

#Majuscula la primera
g2m.genes <-str_to_title(g2m.genes)
s.genes <-str_to_title(s.genes)

all.liver.combined <- CellCycleScoring(all.liver.combined, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)

#visualize the distribution of cell cycle 
RidgePlot(all.liver.combined, features = c("Pcna", "Top2a", "Mcm6", "Mki67"), ncol = 2)

liver.combined_cellcycle <- RunPCA(all.liver.combined, features = c(s.genes, g2m.genes))
DimPlot(liver.combined_cellcycle, split.by = "orig.ident")

#Change active ident
liver.combined_cellcycle <- SetIdent(liver.combined_cellcycle, value = liver.combined_cellcycle@meta.data$seurat_clusters)

prop_cycle <-prop.table(table(Idents(liver.combined_cellcycle), liver.combined_cellcycle$Phase, liver.combined_cellcycle$orig.ident), margin = 2)

##ATAC

####ATAC ANALYSIS###
DefaultAssay(all.merged) <- "ATAC"  

#Compite LSI
all.liver.combined_ATAC <- FindTopFeatures(all.merged, min.cutoff = 5)
all.liver.combined_ATAC <- RunTFIDF(all.liver.combined_ATAC)
all.liver.combined_ATAC <- RunSVD(all.liver.combined_ATAC)

#Change active ident
#all.liver.combined_ATAC <- SetIdent(all.liver.combined_ATAC, value = all.liver.combined_ATAC@meta.data$seurat_clusters)

#transfer label from RNA sample
if (!requireNamespace("remotes", quietly = TRUE)) {
  install.packages("remotes")
}
remotes::install_github("mojaveazure/seurat-disk")
library(SeuratDisk)

reference <- LoadH5Seurat("/Users/marina/SeuratProject.h5Seurat")

reference <-SCTransform(reference)

DefaultAssay(reference) <-"RNA"
DefaultAssay(all.liver.combined_ATAC) <-"SCT"

#transfer cell type labels from reference to query

transfer_anchors <-FindTransferAnchors(
  reference = reference,
  query = all.liver.combined_ATAC,
  normalization.method = "SCT",
  reference.reduction = "pca",
  recompute.residuals = FALSE,
  dims = 1:30
)

predictions <-TransferData(
  anchorset = transfer_anchors,
  refdata = reference$seurat_clusters,
  weight.reduction = all.liver.combined_ATAC[['pca']],
  dims = 1:50
)

all.liver.combined_ATAC <-AddMetaData(
  object = all.liver.combined_ATAC,
  metadata = predictions
)
Idents(all.liver.combined_ATAC) <- "predicted.id"
#built join neighbor graph using both assays

all.liver.combined_ATAC <-FindMultiModalNeighbors(
  object = all.liver.combined_ATAC,
  reduction.list = list("pca", "lsi"),
  dims.list = list(1:50, 2:40),
  modality.weight.name = "RNA.weight",
  verbose = TRUE
)

all.liver.combined_ATAC <-RunUMAP(
  object = all.liver.combined_ATAC,
  nn.name = "weighted.nn",
  assay = "RNA",
  verbose = TRUE
)

DimPlot(all.liver.combined_ATAC, label = T, repel = T, reduction = "umap")
